Tache 0 Diagramme High-level package diagram

classDiagram
    class PresentationLayer {
	%% Intéraction avec l'utilisateur et l'application
        +API (appel des données utilisateurs + appel réservation ...)
		entrée utilisateurs (console pris en compte ?)
    }

	<<package>>
	PresentationLayer

    class BusinessLogicLayer {
        +BaseModel ou utils (permet de ne pas réécrire l'attributs et méthode dans chaque classe)
        +User
        +Place
        +examen (avis client)
        +service (les options)
		+price
		Facade_pattern (va permettre d'appliquer le modèle de façade pour ) 
		%% (def : agit comme un point d’entrée unique pour accéder à un ensemble de classes ou de fonctionnalités plus complexes.)
    }

    class PersistenceLayer {
	%% lié au stockage et à l'accès aux données.
        +stockage_data (stocker les données dans une base de données, utilisation de MYSQL ?)
        +stockage_data_file (sauvegarde les données dans un fichier JSON, XML, ou autre format texte. apparement pour une version plus simple)
    }

    PresentationLayer --> BusinessLogicLayer : utilise via APIService
    BusinessLogicLayer --> StorageFacade : accès via façade
	StorageFacade --> User
	StorageFacade --> Place
	StorageFacade --> examen
	StorageFacade --> service
	StorageFacade --> price

	StorageFacade --> stockage_data : délègue ? (Macqueen m'a dit ça)
	StorageFacade --> stockage_data_file : délègue ? (Macqueen m'a dit ça)
