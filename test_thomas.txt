Résumé global :

[UTILISATEUR]
    |
    v
[Presentation Layer] --- Expose API, gère formats et erreurs
    |
    v
[Business Logic Layer] --- Applique les règles métiers
    |
    v
[Persistence Layer] --- Accès aux données
    |
    v
[BASE DE DONNÉES]

Presentation Layer -> Persistence Layer avec Facade Pattern :

Presentation Layer
    |
    v
 ReviewFacade.create_review(...)
    |
    v
 Business Logic Layer (ReviewService)
    |
    v
Persistence Layer

Utilisateur → API (Presentation Layer)
         	→ Facade (Service Layer)
         	→ Models / Repositories (Business + Persistence Layer)

Composants par couche :
	- Presentation Layer (Services, API) :
		- main.py : Point d'entrée de l'application (Ex : Flask)
		- Routes API (Ex : /users) : Explosent les endpoints REST (GET, POST, PUT, DELETE)
		- Contrôleurs : Fonctions qui reçoivent les requêtes, valident les données et appellent les services
		- Schemas (Ex : UserSchema) : Formatent les objets en JSON
		- Gestion des erreurs (handlers) : Centralisent la geston des exceptions
		- Middleware : Gèrent des traitements transversaux : authentification, logs, CORS...
		- Service d'authentification : Gèrent les tokens, sessions et permissions

	- Business Logic Layer (Models) :
		- Modèles métiers (Users, Place, Review, Amenity) : Représentent les entités et leurs comportements (Ex : user.is_admin())
		- Services métier (UserService, PlaceService) : Gèrent des cas d'usage complexes (Ex : réserver un lieu)
		- Rules / Policies : Contiennent les règles spécifiques (Ex : "un utilisateur ne peut poster qu'un seul avis par lieu")
		- Façades (UserFacade, ReviewFacade) : Fournissent un point d'accès simplifié aux cas d'usage
		- Validateurs métier : Valident des règles non techniques (Ex : formats de date métier, logique de note)

	- Persistence Layer :
		- ORM Models (UserModel, PlaceModel) : Mappent les entités métier à la base de données
		- Repositories (UserRepository, ReviewRepository) : Fournissent des méthodes pour lire/écrire les données (Ex : get_user_by_id, save_review)
		- Database Engine (MySQL, SQLite) : Base de données physique ou en mémoire
		- Session/Connexion Database : Gestion des transactions et connexions
		- Migrations (alembic, flask-migrate) : Gèrent les évolutions du schéma de la base de données
		- Configuration (database.cfg, .env) : Paramètres de connexion (host, port, user, dbname)

Explications détaillées Facade :

Le Facade Pattern permet de simplifier l'utilisation d'un système complexe, de masquer les détails internes du sous-système,
de centraliser les appels ou traitements multiples via une interface unifiée et de faciliter la maintenant et la compréhension du code.

La classe façade appelle des modules internes, fait le lien entre eux et expose une interface propre aux clients (Ex : API, service, contrôleur...).

Le Facade Pattern permet à la présentation layer (API) d'appeler une seule interface au lieu d'interagir directement avec les modèles et la base.
Il oriente les requêtes : l'API ne sait pas comment les objets sont stockés, elle se contente de demander au "service façade".


FLOWCHART :
---
config:
  theme: default
---
flowchart TD
    A[Utilisateur] --> C[app.py]

    C --> B1["Presentation Layer"]
    B1 --> B2["Routes API (users, places)"]
    B2 --> B3["Contrôleurs"]
    B3 --> B4["Schemas (UserSchema)"]
    B3 --> B5["Middleware"]
    B3 --> B6["Gestion des erreurs"]

    B3 --> F1["Facade (UserFacade, ReviewFacade)"]

    F1 --> D1["Business Logic Layer"]
    D1 --> D2["Services métiers (UserService, PlaceService)"]
    D2 --> D3["Modèles métiers (User, Place, Review...)"]
    D2 --> D4["Rules / Policies"]
    D2 --> D5["Validateurs métier"]

    D3 --> E1["Persistence Layer"]
    E1 --> E2["ORM Models (UserModel, PlaceModel)"]
    E2 --> E3["Repositories (UserRepository, ReviewRepository)"]
    E3 --> E4["Database Engine (MySQL, SQLite)"]
    E4 --> E5["Session / Connexion DB"]
    E5 --> E6["Migrations (alembic, flask-migrate)"]
    E6 --> E7["Configuration (database.cfg, .env)"]

    %% La réponse vers l'utilisateur passe par la présentation
    D2 --> G[Résultat]
    G --> B3
    B3 --> A

    %% Styles
    classDef presentation fill:#cce5ff,stroke:#333,stroke-width:1px;
    classDef business fill:#d4edda,stroke:#333,stroke-width:1px;
    classDef persistence fill:#fff3cd,stroke:#333,stroke-width:1px;
    class B1,B2,B3,B4,B5,B6,F1 presentation;
    class D1,D2,D3,D4,D5 business;
    class E1,E2,E3,E4,E5,E6,E7 persistence;
